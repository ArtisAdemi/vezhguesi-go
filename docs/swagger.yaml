definitions:
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  auth.LoginResponse:
    properties:
      token:
        type: string
      userData:
        $ref: '#/definitions/auth.UserData'
    type: object
  auth.SignupRequest:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  auth.SignupResponse:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  auth.StatusResponse:
    properties:
      status:
        type: boolean
    type: object
  auth.UserData:
    properties:
      avatarImgUrl:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      profileId:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  users.FindByIDResponse:
    properties:
      avatarImgUrl:
        type: string
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  users.UserResponse:
    properties:
      avatarImgUrl:
        type: string
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/:
    post:
      consumes:
      - application/json
      description: Validates email, username, first name, last name, password checks
        if email exists, if not creates new user and sends email with verification
        link.
      parameters:
      - description: SignupRequest
        in: body
        name: SignupRequest
        required: true
        schema:
          $ref: '#/definitions/auth.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SignupResponse'
      summary: Signup
      tags:
      - Auth
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Validates email and password in request, check if user exists in
        DB if not throw 404 otherwise compare the request password with hash, then
        check if user is active, then finds relationships of user with orgs and then
        generates a JWT token, and returns UserData, Orgs, and Token in response.
      parameters:
      - description: LoginRequest
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
      summary: Login
      tags:
      - Auth
  /api/auth/verify-signup/{token}:
    get:
      consumes:
      - application/json
      description: Validates token in param, if token parses valid then user will
        be verified and be updated in DB.
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.StatusResponse'
      summary: VerifySignup
      tags:
      - Auth
  /api/users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.UserResponse'
            type: array
      summary: GetUsers
      tags:
      - Users
  /api/users/{userId}:
    get:
      parameters:
      - description: Authorization Key (e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.FindByIDResponse'
      summary: GetUserByID
      tags:
      - Users
swagger: "2.0"
