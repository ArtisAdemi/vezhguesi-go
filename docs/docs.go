// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/": {
            "post": {
                "description": "Validates email, username, first name, last name, password checks if email exists, if not creates new user and sends email with verification link.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Signup",
                "parameters": [
                    {
                        "description": "SignupRequest",
                        "name": "SignupRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.SignupResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/forgot-password": {
            "post": {
                "description": "Sends email with reset password link to user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "ForgotPassword",
                "parameters": [
                    {
                        "description": "ForgotPasswordRequest",
                        "name": "ForgotPasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.StatusResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Validates email and password in request, check if user exists in DB if not throw 404 otherwise compare the request password with hash, then check if user is active, then finds relationships of user with orgs and then generates a JWT token, and returns UserData, Orgs, and Token in response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "LoginRequest",
                        "name": "LoginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/reset-password/{token}": {
            "put": {
                "description": "Validates token, new password, and confirm new password, checks if user exists in DB then it updates the password in DB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "ResetPassword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ResetPasswordRequest",
                        "name": "ResetPasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.StatusResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/update": {
            "put": {
                "description": "Updates user data in DB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "UpdateUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key (e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "UpdateUserRequest",
                        "name": "UpdateUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.UserData"
                        }
                    }
                }
            }
        },
        "/api/auth/verify-signup/{token}": {
            "get": {
                "description": "Validates token in param, if token parses valid then user will be verified and be updated in DB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "VerifySignup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.StatusResponse"
                        }
                    }
                }
            }
        },
        "/api/entities/": {
            "post": {
                "description": "Validates name, type. Creates a new entity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entities"
                ],
                "summary": "Create Entity",
                "parameters": [
                    {
                        "description": "CreateEntityRequest",
                        "name": "CreateEntityRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.CreateEntityRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.EntityResponse"
                        }
                    }
                }
            }
        },
        "/api/entities/{id}": {
            "get": {
                "description": "Validates name, type. Creates a new entity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entities"
                ],
                "summary": "Get Entity",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.EntityResponse"
                        }
                    }
                }
            }
        },
        "/api/orgs": {
            "post": {
                "description": "Validates user id, org name and org size, checks if org exists in DB by name or slug, if not a new organization with trial subscription will be created and then the created ID will be returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orgs"
                ],
                "summary": "Add",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "AddOrgRequest",
                        "name": "AddOrgRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/orgs.AddOrgRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/orgs.OrgResponse"
                        }
                    }
                }
            }
        },
        "/api/reports/": {
            "get": {
                "description": "Validates user id. Gets all reports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get Reports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key (e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "terms",
                        "name": "terms",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.GetReportsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Validates subject, start date, end date. Creates a new report.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Create Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key (e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "CreateReportRequest",
                        "name": "CreateReportRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.CreateReportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.ReportResponse"
                        }
                    }
                }
            }
        },
        "/api/reports/my-reports": {
            "get": {
                "description": "Validates user id. Gets all reports made by the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get My Reports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key (e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.GetMyReportsResponse"
                        }
                    }
                }
            }
        },
        "/api/reports/{id}": {
            "get": {
                "description": "Validates id and user id. Gets report by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key (e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.ReportResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Validates id and user id. Updates report",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Update Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key (e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateReportRequest",
                        "name": "UpdateReportRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reports.UpdateReportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reports.ReportResponse"
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "GetUsers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/users.UserResponse"
                            }
                        }
                    }
                }
            }
        },
        "/api/users/user-data": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "GetUserData",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key (e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.UserData"
                        }
                    }
                }
            }
        },
        "/api/users/{userId}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "GetUserByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key (e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.FindByIDResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.ForgotPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "auth.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.LoginResponse": {
            "type": "object",
            "properties": {
                "sessionToken": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "userData": {
                    "$ref": "#/definitions/auth.UserData"
                }
            }
        },
        "auth.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "confirmNewPassword": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                }
            }
        },
        "auth.SignupRequest": {
            "type": "object",
            "properties": {
                "confirmPassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.SignupResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "auth.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean"
                }
            }
        },
        "auth.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.UserData": {
            "type": "object",
            "properties": {
                "avatarImgUrl": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "profileId": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entities.CreateEntityRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "entities.Entity": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "relatedTopics": {
                    "description": "Serialize to JSON",
                    "type": "string"
                },
                "sentimentLabel": {
                    "type": "string"
                },
                "sentimentScores": {
                    "description": "Serialize to JSON",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entities.EntityResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "orgs.AddOrgRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                }
            }
        },
        "orgs.OrgResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "orgSlug": {
                    "type": "string"
                }
            }
        },
        "reports.Analysis": {
            "type": "object",
            "properties": {
                "analysis_results": {
                    "$ref": "#/definitions/reports.AnalysisResults"
                },
                "article_metadata": {
                    "$ref": "#/definitions/reports.ArticleMetadata"
                }
            }
        },
        "reports.AnalysisEntity": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "related_topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sentiment_label": {
                    "type": "string"
                },
                "sentiment_score": {
                    "type": "number"
                }
            }
        },
        "reports.AnalysisResults": {
            "type": "object",
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.AnalysisEntity"
                    }
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.AnalysisTopic"
                    }
                }
            }
        },
        "reports.AnalysisTopic": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "related_entities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sentiment_label": {
                    "type": "string"
                },
                "sentiment_score": {
                    "type": "number"
                }
            }
        },
        "reports.ArticleMetadata": {
            "type": "object",
            "properties": {
                "article_summary": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "published_date": {
                    "type": "string"
                },
                "scraped_at": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "url_id": {
                    "type": "integer"
                }
            }
        },
        "reports.Articles": {
            "type": "object",
            "properties": {
                "config_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "published_date": {
                    "type": "string"
                },
                "scraped_at": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url_id": {
                    "type": "integer"
                }
            }
        },
        "reports.CreateReportRequest": {
            "type": "object",
            "properties": {
                "endDate": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "reports.EntityAnalysis": {
            "type": "object",
            "properties": {
                "analyses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.Analysis"
                    }
                },
                "entity_name": {
                    "type": "string"
                },
                "total_articles": {
                    "type": "integer"
                }
            }
        },
        "reports.GetMyReportsResponse": {
            "type": "object",
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.EntityAnalysis"
                    }
                }
            }
        },
        "reports.GetReportsResponse": {
            "type": "object",
            "properties": {
                "analyses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.Analysis"
                    }
                },
                "total_articles": {
                    "type": "integer"
                }
            }
        },
        "reports.Report": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "entities": {
                    "description": "Updated to use a many-to-many relationship",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Entity"
                    }
                },
                "findings": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "reportText": {
                    "type": "string"
                },
                "sentiment": {
                    "type": "integer"
                },
                "sourceID": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/users.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "reports.ReportEntity": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "reports.ReportResponse": {
            "type": "object",
            "properties": {
                "articles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.Articles"
                    }
                },
                "report": {
                    "$ref": "#/definitions/reports.Report"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "reports.UpdateReportRequest": {
            "type": "object",
            "properties": {
                "endDate": {
                    "type": "string"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reports.ReportEntity"
                    }
                },
                "findings": {
                    "type": "string"
                },
                "reportText": {
                    "type": "string"
                },
                "sentiment": {
                    "type": "integer"
                },
                "sourceId": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "users.FindByIDResponse": {
            "type": "object",
            "properties": {
                "avatarImgUrl": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.User": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "avatarImgKey": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "verifiedEmail": {
                    "type": "boolean"
                }
            }
        },
        "users.UserData": {
            "type": "object",
            "properties": {
                "avatarImgUrl": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "profileId": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.UserResponse": {
            "type": "object",
            "properties": {
                "avatarImgUrl": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
